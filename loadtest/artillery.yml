config:
  target: "https://13-125-17-12.sslip.io"
  phases:
    - duration: 10
      arrivalRate: 15
    - duration: 20
      arrivalRate: 25
  defaults:
    headers:
      content-type: application/json
  http:
    timeout: 6000
    followRedirect: true
    pool: 50
  processor: |
    function genUser(ctx, events, done) {
      const n = Math.floor(100000 + Math.random()*900000);
      ctx.vars.email = `user_${n}@test.io`;
      return done();
    }
    function pickUserId(ctx, events, done) {
      ctx.vars.userId = ctx.vars.userId || ctx.vars.userIdFallback;
      if (!ctx.vars.userId) return done(new Error("No userId in signup response"));
      return done();
    }
    function pickToken(ctx, events, done) {
      ctx.vars.token = ctx.vars.token || ctx.vars.tokenFallback;
      if (!ctx.vars.token) return done(new Error("No token in login response"));
      return done();
    }
    module.exports = { genUser, pickUserId, pickToken };

scenarios:
  - name: products list
    flow:
      - get:
          url: "/api/backend/products"
          expect: [ { statusCode: 200 } ]

  - name: signup + login + create product
    flow:
      - function: "genUser"
      - post:
          url: "/api/backend/auth/signup"
          json:
            email: "{{ email }}"
            password: "P@ssw0rd!"
            name: "Eco User"
          capture:
            - json: "$.user.id"
              as: "userId"
            - json: "$.id"
              as: "userIdFallback"
          expect: [ { statusCode: "200..201" } ]
      - function: "pickUserId"

      - post:
          url: "/api/backend/auth/login"
          json:
            email: "{{ email }}"
            password: "P@ssw0rd!"
          capture:
            - json: "$.token"
              as: "token"
            - json: "$.accessToken"
              as: "tokenFallback"
          expect: [ { statusCode: 200 } ]
      - function: "pickToken"

      - post:
          url: "/api/backend/products"
          headers:
            authorization: "Bearer {{ token }}"
          json:
            name: "EcoBottle {{ $randomString(6) }}"
            price: 19.99
          expect: [ { statusCode: 201 } ]

  - name: list after create
    flow:
      - get:
          url: "/api/backend/products"
          expect: [ { statusCode: 200 } ]
