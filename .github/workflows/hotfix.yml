name: 🔥 Hotfix Deployment

on:
  workflow_dispatch:
    inputs:
      hotfix_description:
        description: 'Describe the hotfix'
        required: true
        type: string
      
      target_environment:
        description: 'Environment to deploy hotfix'
        required: true
        type: choice
        options:
        - staging
        - production
      
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        type: boolean
        default: false

jobs:
  emergency-tests:
    name: 🧪 Emergency Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '*/package-lock.json'

    - name: 🧪 Quick backend tests
      run: |
        cd backend
        npm ci
        npm run type-check
        npm run build

    - name: 🧪 Quick frontend tests  
      run: |
        cd frontend
        npm ci
        npm run type-check
        npm run build

  hotfix-deploy:
    name: 🔥 Deploy Hotfix
    runs-on: ubuntu-latest
    needs: emergency-tests
    if: always() && (needs.emergency-tests.result == 'success' || github.event.inputs.skip_tests == 'true')
    environment: ${{ github.event.inputs.target_environment }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: 📋 Create hotfix environment
      run: |
        # Use production-like config for hotfix
        cat > .env.prod << EOF
        NODE_ENV=${{ github.event.inputs.target_environment }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        REDIS_URL=${{ secrets.REDIS_URL }}
        NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}
        NEXT_PUBLIC_API_BASE=${{ vars.NEXT_PUBLIC_API_BASE }}
        CORS_ORIGIN=${{ vars.CORS_ORIGIN }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        AWS_REGION=${{ vars.AWS_REGION }}
        GRAFANA_USER=${{ vars.GRAFANA_USER }}
        GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
        PORT=4000
        PROM_PORT=9100
        ENABLE_METRICS=true
        ENABLE_CACHE=true
        ENABLE_RATE_LIMITING=true
        LOG_LEVEL=info
        # Hotfix marker
        HOTFIX_ID=${{ github.sha }}
        HOTFIX_DESCRIPTION="${{ github.event.inputs.hotfix_description }}"
        EOF

    - name: 💾 Backup current deployment
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        cd /home/ubuntu
        
        # Create backup
        BACKUP_DIR="ecobottle-backup-$(date +%Y%m%d-%H%M%S)"
        echo "📦 Creating backup: $BACKUP_DIR"
        
        cp -r ecobottle "$BACKUP_DIR"
        
        # Keep only last 5 backups
        ls -dt ecobottle-backup-* | tail -n +6 | xargs rm -rf
        
        echo "✅ Backup created: $BACKUP_DIR"
        ENDSSH

    - name: 🚀 Deploy hotfix
      run: |
        # Upload files
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='*/node_modules' \
          --exclude='*.log' \
          --exclude='.env*' \
          --exclude='terraform/' \
          -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
          ./ ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/ubuntu/ecobottle/

        # Upload hotfix config
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          .env.prod ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/ubuntu/ecobottle/

    - name: ⚡ Fast deployment
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        cd /home/ubuntu/ecobottle
        
        echo "🔥 Deploying hotfix: ${{ github.event.inputs.hotfix_description }}"
        
        # Quick restart without full rebuild
        docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml down
        docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml up -d --build
        
        # Quick health check
        sleep 30
        
        if curl -sf http://localhost/health > /dev/null; then
          echo "✅ Hotfix deployed successfully!"
        else
          echo "❌ Hotfix deployment failed!"
          exit 1
        fi
        ENDSSH

    - name: 🧪 Verify hotfix
      run: |
        echo "🧪 Verifying hotfix deployment..."
        
        # Test critical endpoints
        curl -sf "http://${{ vars.EC2_HOST }}/health" || exit 1
        curl -sf "http://${{ vars.EC2_HOST }}/api/products" || exit 1
        
        echo "✅ Hotfix verification passed"

    - name: 📢 Hotfix notification
      if: always()
      run: |
        echo "## 🔥 Hotfix Deployment Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Hotfix:** ${{ github.event.inputs.hotfix_description }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "### ✅ Hotfix Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Application: http://${{ vars.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- Monitoring: http://${{ vars.EC2_HOST }}/grafana" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Hotfix Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "- Check logs and consider rollback" >> $GITHUB_STEP_SUMMARY
        fi

  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && needs.hotfix-deploy.result == 'failure'
    needs: hotfix-deploy
    environment: ${{ github.event.inputs.target_environment }}
    
    steps:
    - name: 🔧 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: 🔄 Rollback to previous version
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        cd /home/ubuntu
        
        # Find latest backup
        LATEST_BACKUP=$(ls -dt ecobottle-backup-* 2>/dev/null | head -n1)
        
        if [[ -n "$LATEST_BACKUP" ]]; then
          echo "🔄 Rolling back to: $LATEST_BACKUP"
          
          # Stop current deployment
          cd ecobottle
          docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml down || true
          cd ..
          
          # Restore backup
          rm -rf ecobottle
          cp -r "$LATEST_BACKUP" ecobottle
          
          # Restart services
          cd ecobottle
          docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml up -d
          
          sleep 30
          
          if curl -sf http://localhost/health > /dev/null; then
            echo "✅ Rollback successful!"
          else
            echo "❌ Rollback failed!"
          fi
        else
          echo "❌ No backup found for rollback!"
        fi
        ENDSSH
