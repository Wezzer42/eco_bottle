name: üîê Setup Deployment Secrets

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to configure'
        required: true
        type: choice
        options:
        - staging
        - production
      
      rotate_secrets:
        description: 'Rotate security secrets'
        required: false
        type: boolean
        default: false

jobs:
  setup-secrets:
    name: üîê Configure ${{ github.event.inputs.environment }} Secrets
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: üîë Generate new secrets (if rotating)
      if: github.event.inputs.rotate_secrets == 'true'
      run: |
        echo "üîÑ Generating new security secrets..."
        
        # Generate new JWT secret (64 chars)
        NEW_JWT_SECRET=$(openssl rand -hex 32)
        echo "NEW_JWT_SECRET=$NEW_JWT_SECRET" >> $GITHUB_ENV
        
        # Generate new NextAuth secret (32 chars)
        NEW_NEXTAUTH_SECRET=$(openssl rand -hex 16)
        echo "NEW_NEXTAUTH_SECRET=$NEW_NEXTAUTH_SECRET" >> $GITHUB_ENV
        
        # Generate new Grafana password
        NEW_GRAFANA_PASSWORD="EcoBot$(date +%Y%m)$(openssl rand -hex 4)"
        echo "NEW_GRAFANA_PASSWORD=$NEW_GRAFANA_PASSWORD" >> $GITHUB_ENV
        
        echo "‚úÖ New secrets generated"
        echo "‚ö†Ô∏è Remember to update these secrets in GitHub repository settings!"

    - name: üìã Create secrets configuration
      run: |
        # Create environment-specific secrets file
        case "${{ github.event.inputs.environment }}" in
          "production")
            cat > secrets.env << EOF
            # Production Environment Secrets
            # Generated: $(date)
            
            # Database
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            # Cache
            REDIS_URL=${{ secrets.REDIS_URL }}
            REDIS_AUTH_TOKEN=${{ secrets.REDIS_AUTH_TOKEN }}
            
            # Security Secrets
            JWT_SECRET=${NEW_JWT_SECRET:-${{ secrets.JWT_SECRET }}}
            NEXTAUTH_SECRET=${NEW_NEXTAUTH_SECRET:-${{ secrets.NEXTAUTH_SECRET }}}
            
            # OAuth
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            
            # Monitoring
            GRAFANA_PASSWORD=${NEW_GRAFANA_PASSWORD:-${{ secrets.GRAFANA_PASSWORD }}}
            
            # AWS Secrets
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
            # Backup
            BACKUP_S3_BUCKET=${{ secrets.BACKUP_S3_BUCKET }}
            BACKUP_ENCRYPTION_KEY=${{ secrets.BACKUP_ENCRYPTION_KEY }}
            
            # SSL/TLS
            SSL_CERT_EMAIL=${{ secrets.SSL_CERT_EMAIL }}
            
            # Notification webhooks
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
            EOF
            ;;
          "staging")
            cat > secrets.env << EOF
            # Staging Environment Secrets
            # Generated: $(date)
            
            # Database
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
            
            # Cache
            REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
            
            # Security Secrets
            JWT_SECRET=${NEW_JWT_SECRET:-${{ secrets.STAGING_JWT_SECRET }}}
            NEXTAUTH_SECRET=${NEW_NEXTAUTH_SECRET:-${{ secrets.STAGING_NEXTAUTH_SECRET }}}
            
            # OAuth (staging app)
            GOOGLE_CLIENT_ID=${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
            
            # Monitoring
            GRAFANA_PASSWORD=${NEW_GRAFANA_PASSWORD:-${{ secrets.STAGING_GRAFANA_PASSWORD }}}
            EOF
            ;;
        esac

    - name: üîê Deploy secrets to server
      run: |
        # Upload secrets file securely
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          secrets.env ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/ubuntu/

        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        # Move secrets to secure location
        sudo mkdir -p /etc/ecobottle/secrets
        sudo mv /home/ubuntu/secrets.env /etc/ecobottle/secrets/
        sudo chmod 600 /etc/ecobottle/secrets/secrets.env
        sudo chown root:root /etc/ecobottle/secrets/secrets.env
        
        # Create symlink for application
        cd /home/ubuntu/ecobottle
        ln -sf /etc/ecobottle/secrets/secrets.env .secrets.env
        
        echo "‚úÖ Secrets deployed securely"
        ENDSSH

    - name: üß™ Validate secrets
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        cd /home/ubuntu/ecobottle
        
        # Check if secrets file exists and is readable
        if [[ -f .secrets.env ]]; then
          echo "‚úÖ Secrets file exists"
          
          # Check if required secrets are present
          if grep -q "JWT_SECRET=" .secrets.env && \
             grep -q "DATABASE_URL=" .secrets.env && \
             grep -q "NEXTAUTH_SECRET=" .secrets.env; then
            echo "‚úÖ Required secrets are present"
          else
            echo "‚ùå Missing required secrets"
            exit 1
          fi
        else
          echo "‚ùå Secrets file not found"
          exit 1
        fi
        ENDSSH

    - name: üîÑ Update application with new secrets
      if: github.event.inputs.rotate_secrets == 'true'
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        cd /home/ubuntu/ecobottle
        
        # Merge secrets with environment config
        if [[ -f .env.prod ]]; then
          # Backup current config
          cp .env.prod .env.prod.backup
          
          # Source secrets and recreate env file
          source .secrets.env
          
          # Recreate .env.prod with new secrets
          cat > .env.prod << EOF
          # Environment Configuration with Updated Secrets
          # Updated: $(date)
          
          NODE_ENV=${{ github.event.inputs.environment }}
          DATABASE_URL=$DATABASE_URL
          REDIS_URL=$REDIS_URL
          JWT_SECRET=$JWT_SECRET
          NEXTAUTH_SECRET=$NEXTAUTH_SECRET
          GRAFANA_PASSWORD=$GRAFANA_PASSWORD
          
          # Application URLs
          NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}
          NEXT_PUBLIC_API_BASE=${{ vars.NEXT_PUBLIC_API_BASE }}
          CORS_ORIGIN=${{ vars.CORS_ORIGIN }}
          
          # AWS Configuration
          AWS_REGION=${{ vars.AWS_REGION }}
          
          # Application Settings
          PORT=4000
          PROM_PORT=9100
          ENABLE_METRICS=true
          ENABLE_CACHE=true
          ENABLE_RATE_LIMITING=true
          EOF
          
          chmod 600 .env.prod
          
          echo "‚úÖ Configuration updated with new secrets"
        fi
        ENDSSH

    - name: üîÑ Restart services with new secrets
      if: github.event.inputs.rotate_secrets == 'true'
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        cd /home/ubuntu/ecobottle
        
        echo "üîÑ Restarting services with new secrets..."
        
        # Graceful restart
        docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml down
        docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml up -d
        
        # Wait for services
        sleep 45
        
        # Health check
        if curl -sf http://localhost/health > /dev/null; then
          echo "‚úÖ Services restarted successfully with new secrets"
        else
          echo "‚ùå Service restart failed"
          
          # Rollback to previous config
          if [[ -f .env.prod.backup ]]; then
            echo "üîÑ Rolling back to previous configuration..."
            cp .env.prod.backup .env.prod
            docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml down
            docker-compose -f docker-compose.simple.yml -f docker-compose.aws.yml up -d
          fi
          
          exit 1
        fi
        ENDSSH

    - name: üßπ Cleanup
      if: always()
      run: |
        # Remove local secrets file
        rm -f secrets.env
        
        # Remove backup on server
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} << 'ENDSSH'
        
        cd /home/ubuntu/ecobottle
        rm -f .env.prod.backup
        ENDSSH

    - name: üìä Secrets management report
      run: |
        echo "## üîê Secrets Management Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Secrets Rotated:** ${{ github.event.inputs.rotate_secrets }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event.inputs.rotate_secrets }}" == "true" ]]; then
          echo "### üîÑ Rotated Secrets" >> $GITHUB_STEP_SUMMARY
          echo "- JWT_SECRET: ‚úÖ Updated" >> $GITHUB_STEP_SUMMARY
          echo "- NEXTAUTH_SECRET: ‚úÖ Updated" >> $GITHUB_STEP_SUMMARY
          echo "- GRAFANA_PASSWORD: ‚úÖ Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Action Required:** Update these secrets in GitHub repository settings" >> $GITHUB_STEP_SUMMARY
        else
          echo "### üìã Secrets Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Existing secrets deployed to server" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration validated" >> $GITHUB_STEP_SUMMARY
        fi
