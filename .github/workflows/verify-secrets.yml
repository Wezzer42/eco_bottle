name: 🔍 Verify Deployment Secrets

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to verify'
        required: true
        type: choice
        options:
        - staging
        - production

  schedule:
    # Run weekly on Sunday at 2 AM
    - cron: '0 2 * * 0'

jobs:
  verify-secrets:
    name: 🔍 Verify ${{ github.event.inputs.environment || 'all' }} Secrets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment && fromJSON(format('["{0}"]', github.event.inputs.environment)) || fromJSON('["staging", "production"]') }}
    environment: ${{ matrix.environment }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Check repository secrets
      run: |
        echo "## 🔐 Repository Secrets Verification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if secrets are set (without revealing values)
        secrets_status="✅ All repository secrets present"
        
        if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
          secrets_status="❌ SSH_PRIVATE_KEY missing"
        elif [[ -z "${{ secrets.JWT_SECRET }}" ]]; then
          secrets_status="❌ JWT_SECRET missing"
        elif [[ -z "${{ secrets.NEXTAUTH_SECRET }}" ]]; then
          secrets_status="❌ NEXTAUTH_SECRET missing"
        fi
        
        echo "**Repository Secrets:** $secrets_status" >> $GITHUB_STEP_SUMMARY

    - name: 🌍 Check environment secrets
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌍 ${{ matrix.environment }} Environment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check environment-specific secrets
        case "${{ matrix.environment }}" in
          "production")
            if [[ -n "${{ secrets.DATABASE_URL }}" ]]; then
              echo "- DATABASE_URL: ✅ Set" >> $GITHUB_STEP_SUMMARY
            else
              echo "- DATABASE_URL: ❌ Missing" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ -n "${{ secrets.REDIS_URL }}" ]]; then
              echo "- REDIS_URL: ✅ Set" >> $GITHUB_STEP_SUMMARY
            else
              echo "- REDIS_URL: ❌ Missing" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ -n "${{ secrets.GRAFANA_PASSWORD }}" ]]; then
              echo "- GRAFANA_PASSWORD: ✅ Set" >> $GITHUB_STEP_SUMMARY
            else
              echo "- GRAFANA_PASSWORD: ❌ Missing" >> $GITHUB_STEP_SUMMARY
            fi
            ;;
          "staging")
            if [[ -n "${{ secrets.STAGING_JWT_SECRET }}" ]]; then
              echo "- STAGING_JWT_SECRET: ✅ Set" >> $GITHUB_STEP_SUMMARY
            else
              echo "- STAGING_JWT_SECRET: ❌ Missing" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ -n "${{ secrets.STAGING_NEXTAUTH_SECRET }}" ]]; then
              echo "- STAGING_NEXTAUTH_SECRET: ✅ Set" >> $GITHUB_STEP_SUMMARY
            else
              echo "- STAGING_NEXTAUTH_SECRET: ❌ Missing" >> $GITHUB_STEP_SUMMARY
            fi
            ;;
        esac

    - name: 🔧 Test SSH connection
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Connectivity Tests" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts
        
        # Test SSH connection
        if ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
           ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "echo 'SSH connection successful'"; then
          echo "- SSH Connection: ✅ Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "- SSH Connection: ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🗄️ Test database connection
      if: matrix.environment == 'production'
      run: |
        # Extract database details from URL
        DB_URL="${{ secrets.DATABASE_URL }}"
        
        if [[ -n "$DB_URL" ]]; then
          # Simple connection test (without revealing credentials)
          if echo "$DB_URL" | grep -q "ecobottle.c5a0ccyi8zva.ap-northeast-2.rds.amazonaws.com"; then
            echo "- Database URL: ✅ Format correct" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Database URL: ❌ Incorrect format" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- Database URL: ❌ Missing" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🔄 Test Redis connection
      if: matrix.environment == 'production'
      run: |
        REDIS_URL="${{ secrets.REDIS_URL }}"
        
        if [[ -n "$REDIS_URL" ]]; then
          if echo "$REDIS_URL" | grep -q "ecobottle.cache.amazonaws.com"; then
            echo "- Redis URL: ✅ Format correct" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Redis URL: ❌ Incorrect format" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- Redis URL: ❌ Missing" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🔐 Validate secret formats
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔐 Secret Format Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check JWT secret length
        JWT_SECRET="${{ secrets.JWT_SECRET }}"
        if [[ ${#JWT_SECRET} -eq 64 ]]; then
          echo "- JWT_SECRET length: ✅ 64 chars" >> $GITHUB_STEP_SUMMARY
        else
          echo "- JWT_SECRET length: ❌ ${#JWT_SECRET} chars (expected 64)" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check NextAuth secret length
        NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
        if [[ ${#NEXTAUTH_SECRET} -eq 32 ]]; then
          echo "- NEXTAUTH_SECRET length: ✅ 32 chars" >> $GITHUB_STEP_SUMMARY
        else
          echo "- NEXTAUTH_SECRET length: ❌ ${#NEXTAUTH_SECRET} chars (expected 32)" >> $GITHUB_STEP_SUMMARY
        fi

    - name: ⚠️ Security recommendations
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Rotate secrets monthly" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Monitor secret usage" >> $GITHUB_STEP_SUMMARY
        echo "- 🚫 Never log or expose secrets" >> $GITHUB_STEP_SUMMARY
        echo "- 💾 Backup secrets securely" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 Use least privilege access" >> $GITHUB_STEP_SUMMARY

  notify-results:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: verify-secrets
    if: always()
    
    steps:
    - name: 📊 Verification summary
      run: |
        echo "## 🔍 Secrets Verification Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ needs.verify-secrets.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.verify-secrets.result }}" == "success" ]]; then
          echo "✅ All secrets verification passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some secrets verification failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Check individual environment results" >> $GITHUB_STEP_SUMMARY
          echo "2. Run setup-github-secrets.sh if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify EC2 connectivity" >> $GITHUB_STEP_SUMMARY
        fi
