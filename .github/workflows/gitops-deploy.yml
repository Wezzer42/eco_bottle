name: GitOps Deploy

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  build-backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-gitops:
    needs: [build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITOPS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Update backend image tag
        if: needs.build-backend.result == 'success'
        run: |
          # Extract just the image tag (latest or SHA)
          IMAGE_TAG=$(echo "${{ needs.build-backend.outputs.image-tag }}" | grep -o '[^:]*$')
          
          # Update values.yaml
          sed -i "s|tag: .*|tag: \"${IMAGE_TAG}\"|" infra/helm/api/values.yaml
          
          echo "Updated backend image tag to: ${IMAGE_TAG}"

      - name: Update frontend image tag
        if: needs.build-frontend.result == 'success'
        run: |
          # Extract just the image tag (latest or SHA)
          IMAGE_TAG=$(echo "${{ needs.build-frontend.outputs.image-tag }}" | grep -o '[^:]*$')
          
          # Update values.yaml when we have frontend chart
          # sed -i "s|tag: .*|tag: \"${IMAGE_TAG}\"|" infra/helm/frontend/values.yaml
          
          echo "Frontend image tag: ${IMAGE_TAG}"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add infra/helm/*/values.yaml
          git commit -m "üöÄ Update image tags
          
          Backend: ${{ needs.build-backend.outputs.image-tag }}
          Frontend: ${{ needs.build-frontend.outputs.image-tag }}
          
          Automated by GitOps pipeline"
          
          git push

  security-scan:
    needs: [build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner (Backend)
        if: needs.build-backend.result == 'success'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-backend.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        if: needs.build-backend.result == 'success'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend-results.sarif'

  notify:
    needs: [build-backend, build-frontend, update-gitops]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.update-gitops.result }}" == "success" ]]; then
            echo "üéâ GitOps deployment initiated successfully!"
            echo "Argo CD will sync the changes automatically."
          else
            echo "‚ùå GitOps deployment failed!"
            exit 1
          fi
